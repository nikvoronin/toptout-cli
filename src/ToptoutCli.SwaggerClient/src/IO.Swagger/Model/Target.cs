/* 
 * Toptout
 *
 * Get data about telemetry channels in various applications
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Target
    /// </summary>
    [DataContract]
        public partial class Target :  IEquatable<Target>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Target" /> class.
        /// </summary>
        /// <param name="exec">exec.</param>
        /// <param name="env">env.</param>
        /// <param name="plainFile">plainFile.</param>
        /// <param name="jsonFile">jsonFile.</param>
        /// <param name="registry">registry.</param>
        /// <param name="noop">noop.</param>
        public Target(Exec exec = default(Exec), Env env = default(Env), PlainFile plainFile = default(PlainFile), JSONFile jsonFile = default(JSONFile), Registry registry = default(Registry), List<Noop> noop = default(List<Noop>))
        {
            this.Exec = exec;
            this.Env = env;
            this.PlainFile = plainFile;
            this.JsonFile = jsonFile;
            this.Registry = registry;
            this.Noop = noop;
        }
        
        /// <summary>
        /// Gets or Sets Exec
        /// </summary>
        [DataMember(Name="exec", EmitDefaultValue=false)]
        public Exec Exec { get; set; }

        /// <summary>
        /// Gets or Sets Env
        /// </summary>
        [DataMember(Name="env", EmitDefaultValue=false)]
        public Env Env { get; set; }

        /// <summary>
        /// Gets or Sets PlainFile
        /// </summary>
        [DataMember(Name="plain_file", EmitDefaultValue=false)]
        public PlainFile PlainFile { get; set; }

        /// <summary>
        /// Gets or Sets JsonFile
        /// </summary>
        [DataMember(Name="json_file", EmitDefaultValue=false)]
        public JSONFile JsonFile { get; set; }

        /// <summary>
        /// Gets or Sets Registry
        /// </summary>
        [DataMember(Name="registry", EmitDefaultValue=false)]
        public Registry Registry { get; set; }

        /// <summary>
        /// Gets or Sets Noop
        /// </summary>
        [DataMember(Name="noop", EmitDefaultValue=false)]
        public List<Noop> Noop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Target {\n");
            sb.Append("  Exec: ").Append(Exec).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  PlainFile: ").Append(PlainFile).Append("\n");
            sb.Append("  JsonFile: ").Append(JsonFile).Append("\n");
            sb.Append("  Registry: ").Append(Registry).Append("\n");
            sb.Append("  Noop: ").Append(Noop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Target);
        }

        /// <summary>
        /// Returns true if Target instances are equal
        /// </summary>
        /// <param name="input">Instance of Target to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Target input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exec == input.Exec ||
                    (this.Exec != null &&
                    this.Exec.Equals(input.Exec))
                ) && 
                (
                    this.Env == input.Env ||
                    (this.Env != null &&
                    this.Env.Equals(input.Env))
                ) && 
                (
                    this.PlainFile == input.PlainFile ||
                    (this.PlainFile != null &&
                    this.PlainFile.Equals(input.PlainFile))
                ) && 
                (
                    this.JsonFile == input.JsonFile ||
                    (this.JsonFile != null &&
                    this.JsonFile.Equals(input.JsonFile))
                ) && 
                (
                    this.Registry == input.Registry ||
                    (this.Registry != null &&
                    this.Registry.Equals(input.Registry))
                ) && 
                (
                    this.Noop == input.Noop ||
                    this.Noop != null &&
                    input.Noop != null &&
                    this.Noop.SequenceEqual(input.Noop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exec != null)
                    hashCode = hashCode * 59 + this.Exec.GetHashCode();
                if (this.Env != null)
                    hashCode = hashCode * 59 + this.Env.GetHashCode();
                if (this.PlainFile != null)
                    hashCode = hashCode * 59 + this.PlainFile.GetHashCode();
                if (this.JsonFile != null)
                    hashCode = hashCode * 59 + this.JsonFile.GetHashCode();
                if (this.Registry != null)
                    hashCode = hashCode * 59 + this.Registry.GetHashCode();
                if (this.Noop != null)
                    hashCode = hashCode * 59 + this.Noop.GetHashCode();
                return hashCode;
            }
        }
    }
}
