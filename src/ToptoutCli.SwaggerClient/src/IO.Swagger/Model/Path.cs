/* 
 * Toptout
 *
 * Get data about telemetry channels in various applications
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Path
    /// </summary>
    [DataContract]
        public partial class Path :  IEquatable<Path>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Path" /> class.
        /// </summary>
        /// <param name="linux">linux.</param>
        /// <param name="macos">macos.</param>
        /// <param name="windows">windows.</param>
        /// <param name="_default">_default.</param>
        public Path(string linux = default(string), string macos = default(string), string windows = default(string), string _default = default(string))
        {
            this.Linux = linux;
            this.Macos = macos;
            this.Windows = windows;
            this._Default = _default;
        }
        
        /// <summary>
        /// Gets or Sets Linux
        /// </summary>
        [DataMember(Name="linux", EmitDefaultValue=false)]
        public string Linux { get; set; }

        /// <summary>
        /// Gets or Sets Macos
        /// </summary>
        [DataMember(Name="macos", EmitDefaultValue=false)]
        public string Macos { get; set; }

        /// <summary>
        /// Gets or Sets Windows
        /// </summary>
        [DataMember(Name="windows", EmitDefaultValue=false)]
        public string Windows { get; set; }

        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string _Default { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Path {\n");
            sb.Append("  Linux: ").Append(Linux).Append("\n");
            sb.Append("  Macos: ").Append(Macos).Append("\n");
            sb.Append("  Windows: ").Append(Windows).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Path);
        }

        /// <summary>
        /// Returns true if Path instances are equal
        /// </summary>
        /// <param name="input">Instance of Path to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Path input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Linux == input.Linux ||
                    (this.Linux != null &&
                    this.Linux.Equals(input.Linux))
                ) && 
                (
                    this.Macos == input.Macos ||
                    (this.Macos != null &&
                    this.Macos.Equals(input.Macos))
                ) && 
                (
                    this.Windows == input.Windows ||
                    (this.Windows != null &&
                    this.Windows.Equals(input.Windows))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Linux != null)
                    hashCode = hashCode * 59 + this.Linux.GetHashCode();
                if (this.Macos != null)
                    hashCode = hashCode * 59 + this.Macos.GetHashCode();
                if (this.Windows != null)
                    hashCode = hashCode * 59 + this.Windows.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                return hashCode;
            }
        }
    }
}
