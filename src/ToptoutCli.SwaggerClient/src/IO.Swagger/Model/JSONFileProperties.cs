/* 
 * Toptout
 *
 * Get data about telemetry channels in various applications
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// JSONFileProperties
    /// </summary>
    [DataContract]
        public partial class JSONFileProperties :  IEquatable<JSONFileProperties>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JSONFileProperties" /> class.
        /// </summary>
        /// <param name="path">path (required).</param>
        /// <param name="selector">selector (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="displayValue">displayValue (required).</param>
        public JSONFileProperties(Path path = default(Path), string selector = default(string), Value value = default(Value), string displayValue = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for JSONFileProperties and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "selector" is required (not null)
            if (selector == null)
            {
                throw new InvalidDataException("selector is a required property for JSONFileProperties and cannot be null");
            }
            else
            {
                this.Selector = selector;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for JSONFileProperties and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "displayValue" is required (not null)
            if (displayValue == null)
            {
                throw new InvalidDataException("displayValue is a required property for JSONFileProperties and cannot be null");
            }
            else
            {
                this.DisplayValue = displayValue;
            }
        }
        
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public Path Path { get; set; }

        /// <summary>
        /// Gets or Sets Selector
        /// </summary>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public string Selector { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Value Value { get; set; }

        /// <summary>
        /// Gets or Sets DisplayValue
        /// </summary>
        [DataMember(Name="display_value", EmitDefaultValue=false)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSONFileProperties {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JSONFileProperties);
        }

        /// <summary>
        /// Returns true if JSONFileProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of JSONFileProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSONFileProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Selector == input.Selector ||
                    (this.Selector != null &&
                    this.Selector.Equals(input.Selector))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Selector != null)
                    hashCode = hashCode * 59 + this.Selector.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                return hashCode;
            }
        }
    }
}
