/* 
 * Toptout
 *
 * Get data about telemetry channels in various applications
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Links
    /// </summary>
    [DataContract]
        public partial class Links :  IEquatable<Links>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Links" /> class.
        /// </summary>
        /// <param name="main">main (required).</param>
        /// <param name="telemetry">telemetry.</param>
        /// <param name="privacy">privacy.</param>
        public Links(string main = default(string), string telemetry = default(string), string privacy = default(string))
        {
            // to ensure "main" is required (not null)
            if (main == null)
            {
                throw new InvalidDataException("main is a required property for Links and cannot be null");
            }
            else
            {
                this.Main = main;
            }
            this.Telemetry = telemetry;
            this.Privacy = privacy;
        }
        
        /// <summary>
        /// Gets or Sets Main
        /// </summary>
        [DataMember(Name="main", EmitDefaultValue=false)]
        public string Main { get; set; }

        /// <summary>
        /// Gets or Sets Telemetry
        /// </summary>
        [DataMember(Name="telemetry", EmitDefaultValue=false)]
        public string Telemetry { get; set; }

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public string Privacy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Links {\n");
            sb.Append("  Main: ").Append(Main).Append("\n");
            sb.Append("  Telemetry: ").Append(Telemetry).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Links);
        }

        /// <summary>
        /// Returns true if Links instances are equal
        /// </summary>
        /// <param name="input">Instance of Links to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Links input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Main == input.Main ||
                    (this.Main != null &&
                    this.Main.Equals(input.Main))
                ) && 
                (
                    this.Telemetry == input.Telemetry ||
                    (this.Telemetry != null &&
                    this.Telemetry.Equals(input.Telemetry))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Main != null)
                    hashCode = hashCode * 59 + this.Main.GetHashCode();
                if (this.Telemetry != null)
                    hashCode = hashCode * 59 + this.Telemetry.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                return hashCode;
            }
        }
    }
}
