# coding: utf-8

"""
    Toptout

    Get data about telemetry channels in various applications  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Path(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'linux': 'str',
        'macos': 'str',
        'windows': 'str',
        'default': 'str'
    }

    attribute_map = {
        'linux': 'linux',
        'macos': 'macos',
        'windows': 'windows',
        'default': 'default'
    }

    def __init__(self, linux=None, macos=None, windows=None, default=None):  # noqa: E501
        """Path - a model defined in Swagger"""  # noqa: E501
        self._linux = None
        self._macos = None
        self._windows = None
        self._default = None
        self.discriminator = None
        if linux is not None:
            self.linux = linux
        if macos is not None:
            self.macos = macos
        if windows is not None:
            self.windows = windows
        if default is not None:
            self.default = default

    @property
    def linux(self):
        """Gets the linux of this Path.  # noqa: E501


        :return: The linux of this Path.  # noqa: E501
        :rtype: str
        """
        return self._linux

    @linux.setter
    def linux(self, linux):
        """Sets the linux of this Path.


        :param linux: The linux of this Path.  # noqa: E501
        :type: str
        """

        self._linux = linux

    @property
    def macos(self):
        """Gets the macos of this Path.  # noqa: E501


        :return: The macos of this Path.  # noqa: E501
        :rtype: str
        """
        return self._macos

    @macos.setter
    def macos(self, macos):
        """Sets the macos of this Path.


        :param macos: The macos of this Path.  # noqa: E501
        :type: str
        """

        self._macos = macos

    @property
    def windows(self):
        """Gets the windows of this Path.  # noqa: E501


        :return: The windows of this Path.  # noqa: E501
        :rtype: str
        """
        return self._windows

    @windows.setter
    def windows(self, windows):
        """Sets the windows of this Path.


        :param windows: The windows of this Path.  # noqa: E501
        :type: str
        """

        self._windows = windows

    @property
    def default(self):
        """Gets the default of this Path.  # noqa: E501


        :return: The default of this Path.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Path.


        :param default: The default of this Path.  # noqa: E501
        :type: str
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Path, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Path):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
