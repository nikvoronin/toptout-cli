# coding: utf-8

"""
    Toptout

    Get data about telemetry channels in various applications  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Toptout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'executable_name': 'str',
        'description': 'str',
        'category_id': 'str',
        'category_name': 'str',
        'links': 'Links',
        'telemetry': 'list[Telemetry]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'executable_name': 'executable_name',
        'description': 'description',
        'category_id': 'category_id',
        'category_name': 'category_name',
        'links': 'links',
        'telemetry': 'telemetry'
    }

    def __init__(self, id=None, name=None, executable_name=None, description=None, category_id=None, category_name=None, links=None, telemetry=None):  # noqa: E501
        """Toptout - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._executable_name = None
        self._description = None
        self._category_id = None
        self._category_name = None
        self._links = None
        self._telemetry = None
        self.discriminator = None
        self.id = id
        self.name = name
        if executable_name is not None:
            self.executable_name = executable_name
        self.description = description
        self.category_id = category_id
        self.category_name = category_name
        self.links = links
        if telemetry is not None:
            self.telemetry = telemetry

    @property
    def id(self):
        """Gets the id of this Toptout.  # noqa: E501


        :return: The id of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Toptout.


        :param id: The id of this Toptout.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Toptout.  # noqa: E501


        :return: The name of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Toptout.


        :param name: The name of this Toptout.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def executable_name(self):
        """Gets the executable_name of this Toptout.  # noqa: E501


        :return: The executable_name of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._executable_name

    @executable_name.setter
    def executable_name(self, executable_name):
        """Sets the executable_name of this Toptout.


        :param executable_name: The executable_name of this Toptout.  # noqa: E501
        :type: str
        """

        self._executable_name = executable_name

    @property
    def description(self):
        """Gets the description of this Toptout.  # noqa: E501


        :return: The description of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Toptout.


        :param description: The description of this Toptout.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def category_id(self):
        """Gets the category_id of this Toptout.  # noqa: E501


        :return: The category_id of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Toptout.


        :param category_id: The category_id of this Toptout.  # noqa: E501
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this Toptout.  # noqa: E501


        :return: The category_name of this Toptout.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this Toptout.


        :param category_name: The category_name of this Toptout.  # noqa: E501
        :type: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")  # noqa: E501

        self._category_name = category_name

    @property
    def links(self):
        """Gets the links of this Toptout.  # noqa: E501


        :return: The links of this Toptout.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Toptout.


        :param links: The links of this Toptout.  # noqa: E501
        :type: Links
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def telemetry(self):
        """Gets the telemetry of this Toptout.  # noqa: E501


        :return: The telemetry of this Toptout.  # noqa: E501
        :rtype: list[Telemetry]
        """
        return self._telemetry

    @telemetry.setter
    def telemetry(self, telemetry):
        """Sets the telemetry of this Toptout.


        :param telemetry: The telemetry of this Toptout.  # noqa: E501
        :type: list[Telemetry]
        """

        self._telemetry = telemetry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Toptout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Toptout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
