# coding: utf-8

"""
    Toptout

    Get data about telemetry channels in various applications  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Telemetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_official': 'bool',
        'description': 'str',
        'links': 'Links',
        'target': 'Target'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_official': 'is_official',
        'description': 'description',
        'links': 'links',
        'target': 'target'
    }

    def __init__(self, id=None, name=None, is_official=None, description=None, links=None, target=None):  # noqa: E501
        """Telemetry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_official = None
        self._description = None
        self._links = None
        self._target = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.is_official = is_official
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if target is not None:
            self.target = target

    @property
    def id(self):
        """Gets the id of this Telemetry.  # noqa: E501


        :return: The id of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Telemetry.


        :param id: The id of this Telemetry.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Telemetry.  # noqa: E501


        :return: The name of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Telemetry.


        :param name: The name of this Telemetry.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_official(self):
        """Gets the is_official of this Telemetry.  # noqa: E501


        :return: The is_official of this Telemetry.  # noqa: E501
        :rtype: bool
        """
        return self._is_official

    @is_official.setter
    def is_official(self, is_official):
        """Sets the is_official of this Telemetry.


        :param is_official: The is_official of this Telemetry.  # noqa: E501
        :type: bool
        """
        if is_official is None:
            raise ValueError("Invalid value for `is_official`, must not be `None`")  # noqa: E501

        self._is_official = is_official

    @property
    def description(self):
        """Gets the description of this Telemetry.  # noqa: E501


        :return: The description of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Telemetry.


        :param description: The description of this Telemetry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this Telemetry.  # noqa: E501


        :return: The links of this Telemetry.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Telemetry.


        :param links: The links of this Telemetry.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def target(self):
        """Gets the target of this Telemetry.  # noqa: E501


        :return: The target of this Telemetry.  # noqa: E501
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Telemetry.


        :param target: The target of this Telemetry.  # noqa: E501
        :type: Target
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Telemetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Telemetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
